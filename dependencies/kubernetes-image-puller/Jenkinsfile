#!/usr/bin/env groovy

// PARAMETERS for this pipeline:
// def FORCE_BUILD = "false"

import groovy.transform.Field

def SOURCE_REPO = "che-incubator/kubernetes-image-puller" // upstream source repo from which to find and sync commits to pkgs.devel repo
def DWNSTM_REPO = "containers/codeready-workspaces-imagepuller" // dist-git repo to use as target

// NOTE: must create branches manually
@Field String SOURCE_BRANCH = "7.20.x" // upstream source repo branch from which to find and sync commits to pkgs.devel repo
@Field String DWNSTM_BRANCH = "crw-2.6-rhel-8" // target branch in dist-git repo, eg., crw-2.5-rhel-8
def SCRATCH = "false"
def PUSH_TO_QUAY = "true"
def QUAY_PROJECT = "imagepuller" // also used for the Brew dockerfile params
def EMAIL_BODY = ""
def OLD_SHA=""
def SYNC_FILES = "cfg cmd deploy docker e2e hack pkg utils dev-guide.adoc go.mod go.sum LICENSE Makefile README.md"

def buildNode = "rhel7-releng" // node label
timeout(120) {
	node("${buildNode}"){ stage "Sync repos"
    wrap([$class: 'TimestamperBuildWrapper']) {
      sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/' + DWNSTM_BRANCH + '/product/util.groovy')
      def util = load "${WORKSPACE}/util.groovy"
		  cleanWs()
      CRW_VERSION = util.getCrwVersion(DWNSTM_BRANCH)
      println "CRW_VERSION = '" + CRW_VERSION + "'"
      util.installSkopeo("2.5") // (CRW_VERSION)
      withCredentials([string(credentialsId:'devstudio-release.token', variable: 'GITHUB_TOKEN'),
          file(credentialsId: 'crw-build.keytab', variable: 'CRW_KEYTAB')]) {
        util.bootstrap(CRW_KEYTAB)

        println "########################################################################################################"
        println "##  Clone and update github.com/${SOURCE_REPO}.git"
        println "########################################################################################################"
        util.cloneRepo("https://github.com/${SOURCE_REPO}.git", "${WORKSPACE}/sources", SOURCE_BRANCH)
        SOURCE_SHA = util.getLastCommitSHA("${WORKSPACE}/sources")

        // can't yet generate a PR against eclipse/che-* repos, and can't push directly
        // so check for a new base image but DO NOT commit/push/pull-request
        //TODO updateBaseImages should use SOURCE_BRANCH, but curl from CRW_VERSION
        util.updateBaseImages("${WORKSPACE}/sources", SOURCE_BRANCH, "-f Dockerfile --nocommit")

        println "########################################################################################################"
        println "##  Sync ${QUAY_PROJECT} to pkgs.devel"
        println "########################################################################################################"
        util.cloneRepo("ssh://crw-build@pkgs.devel.redhat.com/${DWNSTM_REPO}", "${WORKSPACE}/targetdwn", DWNSTM_BRANCH)
        OLD_SHA = util.getLastCommitSHA("${WORKSPACE}/targetdwn")
        println "Got OLD_SHA in targetdwn folder: " + OLD_SHA

        // rsync files in github to dist-git
        sh('''#!/bin/bash -xe
          SYNC_FILES="''' + SYNC_FILES + '''"
          for d in ${SYNC_FILES}; do
            if [[ -f ${WORKSPACE}/sources/${d} ]]; then
              rsync -zrlt ${WORKSPACE}/sources/${d} ${WORKSPACE}/targetdwn/${d}
            elif [[ -d ${WORKSPACE}/sources/${d} ]]; then
              # copy over the files
              rsync -zrlt ${WORKSPACE}/sources/${d}/* ${WORKSPACE}/targetdwn/${d}/
              # sync the directory and delete from targetdwn if deleted from source
              rsync -zrlt --delete ${WORKSPACE}/sources/${d}/ ${WORKSPACE}/targetdwn/${d}/
            fi
          done
        ''')

        sh('''#!/bin/bash -xe
          cp -f ${WORKSPACE}/sources/docker/Dockerfile ${WORKSPACE}/targetdwn/Dockerfile
          CRW_VERSION="''' + CRW_VERSION_F + '''"
          # apply patches to transform Che upstream to pkgs.devel version
          sed -i ${WORKSPACE}/targetdwn/Dockerfile --regexp-extended \
            `# Replace ubi8 with rhel8 version` \
            -e "s#ubi8/go-toolset#rhel8/go-toolset#g" \
            `# more replacements` \
            -e "s#FROM registry.redhat.io/#FROM #g" \
            -e "s#FROM registry.access.redhat.com/#FROM #g" \
            -e 's|ARG BOOTSTRAP=.*|ARG BOOTSTRAP=false|' \
            -e 's|^# *(COPY resources.tgz .+)|\\1|' \

          METADATA='ENV SUMMARY="Red Hat CodeReady Workspaces ''' + QUAY_PROJECT + ''' container" \\\r
    DESCRIPTION="Red Hat CodeReady Workspaces ''' + QUAY_PROJECT + ''' container" \\\r
    PRODNAME="codeready-workspaces" \\\r
    COMPNAME="''' + QUAY_PROJECT + '''-rhel8" \r
LABEL summary="$SUMMARY" \\\r
      description="$DESCRIPTION" \\\r
      io.k8s.description="$DESCRIPTION" \\\r
      io.k8s.display-name=\"$DESCRIPTION" \\\r
      io.openshift.tags="$PRODNAME,$COMPNAME" \\\r
      com.redhat.component="$PRODNAME-$COMPNAME-container" \\\r
      name="$PRODNAME/$COMPNAME" \\\r
      version="'${CRW_VERSION}'" \\\r
      license="EPLv2" \\\r
      maintainer="Nick Boldt <nboldt@redhat.com>" \\\r
      io.openshift.expose-services="" \\\r
      usage="" \r'

          echo -e "$METADATA" >> ${WORKSPACE}/targetdwn/Dockerfile
        ''')

        // push changes in github to dist-git
        util.updateBaseImages("${WORKSPACE}/targetdwn", DWNSTM_BRANCH, "--nocommit")
        sh('''#!/bin/bash -xe
          export KRB5CCNAME=/var/tmp/crw-build_ccache
          SYNC_FILES="''' + SYNC_FILES + '''"
          cd ${WORKSPACE}/targetdwn
          if [[ \$(git diff --name-only) ]]; then # file changed
            git add Dockerfile ${SYNC_FILES}
            # note this might fail if we're syncing from a tag vs. a branch
            git commit -s -m "[sync] Update from ''' + SOURCE_REPO + ''' @ ''' + SOURCE_SHA[0..7] + '''" Dockerfile ${SYNC_FILES}
            git push origin ''' + DWNSTM_BRANCH + ''' || true
            NEW_SHA=\$(git rev-parse HEAD) # echo ${NEW_SHA:0:8}
            echo "[sync] Updated pkgs.devel @ ${NEW_SHA:0:8} from ''' + SOURCE_REPO + ''' @ ${SOURCE_SHA:0:8}"
          fi
        ''')
        NEW_SHA = util.getLastCommitSHA("${WORKSPACE}/targetdwn")
        if (OLD_SHA != NEW_SHA) { HAS_CHANGED="true" }

        println "########################################################################################################"
        println "##  Update the tarballs"
        println "########################################################################################################"
        sh('''#!/bin/bash -xe
          export KRB5CCNAME=/var/tmp/crw-build_ccache
          # step 1 - build the container
          cd ${WORKSPACE}/targetdwn

          CONTAINERNAME="imagepullerbuilder"
          # transform Brew friendly Dockerfile so we can use it in Jenkins where base images need full registry path
          sed ${WORKSPACE}/targetdwn/Dockerfile --regexp-extended \
            -e 's|^ *COPY resources.tgz|# &|' \
            -e 's|ARG BOOTSTRAP=.*|ARG BOOTSTRAP=true|' \
            `# replace org/container:tag with reg-proxy/rh-osbs/org-container:tag` \
            `# DISABLED -e "s#^FROM ([^/:]+)/([^/:]+):([^/:]+)#FROM registry-proxy.engineering.redhat.com/rh-osbs/\\1-\\2:\\3#"` \
            -e "s#^FROM ([^/:]+)/([^/:]+):([^/:]+)#FROM registry.redhat.io/\\1/\\2:\\3#" \
            `# replace ubi8-minimal:tag with reg-proxy/rh-osbs/ubi-minimal:tag` \
            `# DISABLED -e "s#^FROM ([^/:]+):([^/:]+)#FROM registry-proxy.engineering.redhat.com/rh-osbs/\\1:\\2#"` \
            -e "s#^FROM ([^/:]+):([^/:]+)#FROM registry.redhat.io/\\1:\\2#" \
            > ${WORKSPACE}/bootstrap.Dockerfile

          echo "======= BOOTSTRAP DOCKERFILE =======>"
          cat ${WORKSPACE}/bootstrap.Dockerfile
          echo "<======= BOOTSTRAP DOCKERFILE ======="

          echo "======= START BOOTSTRAP BUILD =======>"
          docker build -t ${CONTAINERNAME} . --no-cache -f ${WORKSPACE}/bootstrap.Dockerfile \
            --target builder --build-arg BOOTSTRAP=true
          echo "<======= END BOOTSTRAP BUILD ======="

          # update tarballs - step 2 - create tarballs in targetdwn folder
          docker run --rm --entrypoint sh ${CONTAINERNAME} -c 'tar -pzcf - \
              /opt/app-root/src/go/pkg/mod' > /tmp/resources.tgz
          mkdir -p /tmp/resources
          tar xvzf /tmp/resources.tgz -C /tmp/resources

          # update tarballs - step 3 - check old sources' tarballs
          cd ${WORKSPACE}/targetdwn
          # TODO is there a better way to determine if we need to push sources?
          rhpkg sources

          # check diff
          if [[ -f ${WORKSPACE}/targetdwn/resources.tgz ]]; then
            BEFORE_DIR=/tmp/resources-before
            rm -fr ${BEFORE_DIR}; mkdir ${BEFORE_DIR} && tar xzf ${WORKSPACE}/targetdwn/resources.tgz -C ${BEFORE_DIR}
            TAR_DIFF=$(sudo diff --suppress-common-lines -u -r ${BEFORE_DIR} /tmp/resources) || true
          else
            TAR_DIFF="No such file ${WORKSPACE}/targetdwn/resources.tgz -- creating a new one for the first time"
          fi
          if [[ ${TAR_DIFF} ]]; then
            echo "DIFF START *****"
            echo "${TAR_DIFF}"
            echo "***** END DIFF"
            mv -f /tmp/resources.tgz ${WORKSPACE}/targetdwn/resources.tgz
          fi

          # update tarballs - step 4 - commit changes if diff different
          if [[ ${TAR_DIFF} ]]; then
            rhpkg new-sources resources.tgz
            git commit -s -m "[tgz] Update resources.tgz" sources
            git push origin ''' + DWNSTM_BRANCH + '''
          else
            echo "No changes since previous tarball was created."
          fi

          # clean up diff dirs
          sudo rm -fr /tmp/resources /tmp/resources-before
        ''')
        NEW_SHA = util.getLastCommitSHA("${WORKSPACE}/targetdwn")
        if (OLD_SHA != NEW_SHA) { HAS_CHANGED="true" }

        println "########################################################################################################"
        println "##  Container Build"
        println "########################################################################################################"
        if (HAS_CHANGED == "true" || FORCE_BUILD == "true") {
          sh('''#!/bin/bash -xe
            # NOTE: this image needs to build in Brew (CRW <=2.3), then rebuild for Quay, so use QUAY_REBUILD_PATH instead of QUAY_REPO_PATHs variable
            # For CRW 2.4, do not rebuild (just copy to Quay) and use an ImageContentSourcePolicy file to resolve images
            # https://gitlab.cee.redhat.com/codeready-workspaces/knowledge-base/-/blob/master/installStagingCRW.md#create-imagecontentsourcepolicy
            for QRP in ''' + QUAY_PROJECT + '''; do
              QUAY_REPO_PATH=""; if [[ ''' + PUSH_TO_QUAY + ''' == "true" ]]; then QUAY_REPO_PATH="${QRP}-rhel8"; fi
              curl \
"https://codeready-workspaces-jenkins.rhev-ci-vms.eng.rdu2.redhat.com/job/get-sources-rhpkg-container-build/buildWithParameters?\
token=CI_BUILD&\
cause=${QUAY_REPO_PATH}+respin+by+${BUILD_TAG}&\
GIT_BRANCH=''' + DWNSTM_BRANCH + '''&\
GIT_PATHs=containers/codeready-workspaces-${QRP}&\
QUAY_REPO_PATHs=${QUAY_REPO_PATH}&\
JOB_BRANCH=''' + CRW_VERSION + '''&\
FORCE_BUILD=true&\
SCRATCH=''' + SCRATCH + '''"
            done
          ''')
        } else {
          println "No changes upstream, nothing to commit"
        }

        NEW_SHA = util.getLastCommitSHA("${WORKSPACE}/targetdwn")
        println "Got NEW_SHA in targetdwn folder: " + NEW_SHA

        if (NEW_SHA.equals(OLD_SHA) && !FORCE_BUILD.equals("true")) {
          currentBuild.result='UNSTABLE'
        }
      } // withCredentials
    } // wrap
  } // node
} // timeout