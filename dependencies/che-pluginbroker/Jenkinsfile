#!/usr/bin/env groovy

import groovy.transform.Field

// PARAMETERS for this pipeline:
// def FORCE_BUILD = "false"

def SOURCE_REPO = "eclipse/che-plugin-broker" // upstream source repo from which to find and sync commits to pkgs.devel repo
@Field String SOURCE_BRANCH = "v3.4.x" // upstream source repo branch from which to find and sync commits to pkgs.devel repo
def DWNSTM_REPO1 = "containers/codeready-workspaces-pluginbroker-metadata" // dist-git repo to use as target
def DWNSTM_REPO2 = "containers/codeready-workspaces-pluginbroker-artifacts" // dist-git repo to use as target
def DWNSTM_BRANCH = "crw-2.6-rhel-8" // target branch in dist-git repo, eg., crw-2.5-rhel-8
def SCRATCH = "false"
def PUSH_TO_QUAY = "true"
def QUAY_PROJECT1 = "pluginbroker-metadata" // also used for the Brew dockerfile params
def QUAY_PROJECT2 = "pluginbroker-artifacts" // also used for the Brew dockerfile params
def SYNC_FILES = "brokers build cfg common CONTRIBUTING.md  devfile.yaml  Gopkg.lock  Gopkg.toml  LICENSE  Makefile  model  README.md  storage  utils  vendor VERSION"

def OLD_SHA1=""
def OLD_SHA2=""
def SRC_SHA1=""
def HAS_CHANGED="false"

def buildNode = "rhel7-releng" // node label
timeout(120) {
	node("${buildNode}"){ stage "Sync repos"
    wrap([$class: 'TimestamperBuildWrapper']) {
      sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/' + DWNSTM_BRANCH + '/product/util.groovy')
      def util = load "${WORKSPACE}/util.groovy"
      cleanWs()
      CRW_VERSION = util.getCrwVersion(DWNSTM_BRANCH)
      println "CRW_VERSION = '" + CRW_VERSION + "'"
      util.installSkopeo(CRW_VERSION)
      withCredentials([string(credentialsId:'devstudio-release.token', variable: 'GITHUB_TOKEN'),
          file(credentialsId: 'crw-build.keytab', variable: 'CRW_KEYTAB')]) {
        util.bootstrap(CRW_KEYTAB)

        println "########################################################################################################"
        println "##  Clone and update github.com/${SOURCE_REPO}.git"
        println "########################################################################################################"
        util.cloneRepo("https://github.com/${SOURCE_REPO}.git", "${WORKSPACE}/sources", SOURCE_BRANCH)
        OLD_SHA1 = util.getLastCommitSHA("${WORKSPACE}/sources")
        // TODO enable generating PRs for upstream rhel.Dockerfile
        //util.updateBaseImages("${WORKSPACE}/sources/build/metadata", SOURCE_BRANCH, "-f rhel.Dockerfile")
        //util.updateBaseImages("${WORKSPACE}/sources/build/artifacts", SOURCE_BRANCH, "-f rhel.Dockerfile")
        SRC_SHA1 = util.getLastCommitSHA("${WORKSPACE}/sources")
        println "Got SRC_SHA1 in sources folder: " + SRC_SHA1
        if (SRC_SHA1 != OLD_SHA1) { HAS_CHANGED="true" }

        println "########################################################################################################"
        println "##  Sync ${QUAY_PROJECT1} and ${QUAY_PROJECT2} to pkgs.devel"
        println "########################################################################################################"
        util.cloneRepo("ssh://crw-build@pkgs.devel.redhat.com/${DWNSTM_REPO1}", "${WORKSPACE}/target1", DWNSTM_BRANCH)
        OLD_SHA1 = util.getLastCommitSHA("${WORKSPACE}/target1")
        util.cloneRepo("ssh://crw-build@pkgs.devel.redhat.com/${DWNSTM_REPO2}", "${WORKSPACE}/target2", DWNSTM_BRANCH)
        OLD_SHA2 = util.getLastCommitSHA("${WORKSPACE}/target2")

        // rsync files in github to dist-git
        sh('''#!/bin/bash -xe
          SYNC_FILES="''' + SYNC_FILES + '''"
          for targetN in target1 target2; do
            for d in ${SYNC_FILES}; do
              if [[ -f ${WORKSPACE}/sources/${d} ]]; then
                rsync -zrlt ${WORKSPACE}/sources/${d} ${WORKSPACE}/${targetN}/${d}
              elif [[ -d ${WORKSPACE}/sources/${d} ]]; then
                # copy over the files
                rsync -zrlt ${WORKSPACE}/sources/${d}/* ${WORKSPACE}/${targetN}/${d}/
                # sync the directory and delete from target if deleted from source
                rsync -zrlt --delete ${WORKSPACE}/sources/${d}/ ${WORKSPACE}/${targetN}/${d}/
              fi
            done
          done
        ''')

        sh('''#!/bin/bash -xe
          for targetN in target1 target2; do
            # apply changes from upstream che-pluginbroker/build/*/rhel.Dockerfile to downstream Dockerfile
            SOURCEDOCKERFILE=""
            TARGETDOCKERFILE=""
            if [[ \$targetN == "target1" ]]; then
              SOURCEDOCKERFILE="${WORKSPACE}/sources/build/metadata/rhel.Dockerfile"
              TARGETDOCKERFILE="${WORKSPACE}/target1/Dockerfile"
              QUAY_PROJECT="''' + QUAY_PROJECT1 + '''"
            elif [[ \$targetN == "target2" ]]; then
              SOURCEDOCKERFILE="${WORKSPACE}/sources/build/artifacts/rhel.Dockerfile"
              TARGETDOCKERFILE="${WORKSPACE}/target2/Dockerfile"
              QUAY_PROJECT="''' + QUAY_PROJECT2 + '''"
            fi

            CRW_VERSION="''' + CRW_VERSION_F + '''"
            #apply patches
            if [[ ${SOURCEDOCKERFILE} != "" ]] && [[ ${TARGETDOCKERFILE} != "" ]]; then
              sed ${SOURCEDOCKERFILE} \
                -e "s#FROM registry.redhat.io/#FROM #g" \
                -e "s#FROM registry.access.redhat.com/#FROM #g" \
                > ${TARGETDOCKERFILE}
            fi

            METADATA='ENV SUMMARY="Red Hat CodeReady Workspaces '${QUAY_PROJECT}' container" \\\r
        DESCRIPTION="Red Hat CodeReady Workspaces '${QUAY_PROJECT}' container" \\\r
        PRODNAME="codeready-workspaces" \\\r
        COMPNAME="'${QUAY_PROJECT}'-rhel8" \r
    LABEL summary="$SUMMARY" \\\r
          description="$DESCRIPTION" \\\r
          io.k8s.description="$DESCRIPTION" \\\r
          io.k8s.display-name=\"$DESCRIPTION" \\\r
          io.openshift.tags="$PRODNAME,$COMPNAME" \\\r
          com.redhat.component="$PRODNAME-$COMPNAME-container" \\\r
          name="$PRODNAME/$COMPNAME" \\\r
          version="'${CRW_VERSION}'" \\\r
          license="EPLv2" \\\r
          maintainer="Nick Boldt <nboldt@redhat.com>" \\\r
          io.openshift.expose-services="" \\\r
          usage="" \r'

            echo -e "$METADATA" >> ${TARGETDOCKERFILE}
          done
        ''')

        // push changes in github to dist-git
        sh('''#!/bin/bash -xe
          export KRB5CCNAME=/var/tmp/crw-build_ccache
          SYNC_FILES="''' + SYNC_FILES + '''"
          for targetN in target1 target2; do
            cd ${WORKSPACE}/${targetN}
            if [[ \$(git diff --name-only) ]]; then # file changed
              git add Dockerfile ${SYNC_FILES}
              git commit -s -m "[sync] Update from ''' + SOURCE_REPO + ''' @ ''' + SRC_SHA1[0..7] + '''" Dockerfile ${SYNC_FILES}
              git push origin ''' + DWNSTM_BRANCH + '''
              NEW_SHA=\$(git rev-parse HEAD) # echo ${NEW_SHA:0:8}
              echo "[sync] Updated pkgs.devel @ ${NEW_SHA:0:8} from ''' + SOURCE_REPO + ''' @ ''' + SRC_SHA1[0..7] + '''"
            fi

            # update base image
            cd ${WORKSPACE}/${targetN}
            OLD_SHA=\$(git rev-parse HEAD) # echo ${OLD_SHA:0:8}
            /tmp/updateBaseImages.sh -b ''' + DWNSTM_BRANCH + ''' -w ${TARGETDOCKERFILE%/*} -f ${TARGETDOCKERFILE##*/}
            NEW_SHA=\$(git rev-parse HEAD) # echo ${NEW_SHA:0:8}
            if [[ "${OLD_SHA}" != "${NEW_SHA}" ]]; then hasChanged=1; fi
            cd ..
          done
        ''')

        util.updateBaseImages("${WORKSPACE}/target1", DWNSTM_BRANCH)
        util.updateBaseImages("${WORKSPACE}/target2", DWNSTM_BRANCH)
        NEW_SHA = util.getLastCommitSHA("${WORKSPACE}/target1")
        if (OLD_SHA1 != NEW_SHA) { HAS_CHANGED="true" }
        NEW_SHA = util.getLastCommitSHA("${WORKSPACE}/target2")
        if (OLD_SHA2 != NEW_SHA) { HAS_CHANGED="true" }

        println "########################################################################################################"
        println "##  Container Build"
        println "########################################################################################################"
        if (HAS_CHANGED == "true" || FORCE_BUILD == "true") {
          sh('''#!/bin/bash -xe
            for QRP in ''' + QUAY_PROJECT1 + ''' ''' + QUAY_PROJECT2 + '''; do
              QUAY_REPO_PATH=""; if [[ ''' + PUSH_TO_QUAY + ''' == "true" ]]; then QUAY_REPO_PATH="${QRP}-rhel8"; fi
              curl \
"https://codeready-workspaces-jenkins.rhev-ci-vms.eng.rdu2.redhat.com/job/get-sources-rhpkg-container-build/buildWithParameters?\
token=CI_BUILD&\
cause=${QUAY_REPO_PATH}+respin+by+${BUILD_TAG}&\
GIT_BRANCH=''' + DWNSTM_BRANCH + '''&\
GIT_PATHs=containers/codeready-workspaces-${QRP}&\
QUAY_REPO_PATHs=${QUAY_REPO_PATH}&\
JOB_BRANCH=''' + CRW_VERSION + '''&\
FORCE_BUILD=true&\
SCRATCH=''' + SCRATCH + '''"
            done
          ''')
        } else {
          println "No changes upstream, nothing to commit"
        }

        NEW_SHA1 = util.getLastCommitSHA("${WORKSPACE}/target1")
        println "Got NEW_SHA1 in target1 folder: " + NEW_SHA1
        NEW_SHA2 = util.getLastCommitSHA("${WORKSPACE}/target2")
        println "Got NEW_SHA2 in target2 folder: " + NEW_SHA2

        if (NEW_SHA1.equals(OLD_SHA1) && NEW_SHA2.equals(OLD_SHA2) && !FORCE_BUILD.equals("true")) {
          currentBuild.result='UNSTABLE'
        }
      } // withCredentials
    } // wrap
  } // node
} // timeout