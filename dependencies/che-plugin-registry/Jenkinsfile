#!/usr/bin/env groovy

import groovy.transform.Field

// PARAMETERS for this pipeline:
// def FORCE_BUILD = "false"

// TODO source from eclipse/che-plugin-registry too

@Field String MIDSTM_BRANCH = "crw-2.6-rhel-8" // branch of GH and pkgs.devel repos to sync commits

def MIDSTM_REPO = "redhat-developer/codeready-workspaces" //source repo from which to find and sync commits to pkgs.devel repo
def DWNSTM_REPO = "containers/codeready-workspaces-pluginregistry" // dist-git repo to use as target
def DWNSTM_BRANCH = MIDSTM_BRANCH // target branch in dist-git repo, eg., crw-2.5-rhel-8
def SCRATCH = "false"
def PUSH_TO_QUAY = "true"
def QUAY_PROJECT = "pluginregistry" // also used for the Brew dockerfile params
def USE_DIGESTS = "true" // if true, use @sha256:digest in registry; if false, use :tag
def SYNC_FILES="build openshift v3 .gitignore .htaccess LICENSE README.md VERSION"

def OLD_SHA=""
def NEW_SHA=""
def HAS_CHANGED="false"

def buildNode = "rhel7-releng" // node label
timeout(120) {
	node("${buildNode}"){ stage "Sync repos"
    wrap([$class: 'TimestamperBuildWrapper']) {
      sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/codeready-workspaces/' + MIDSTM_BRANCH + '/product/util.groovy')
      def util = load "${WORKSPACE}/util.groovy"
      cleanWs()
      CRW_VERSION = util.getCrwVersion(MIDSTM_BRANCH)
      println "CRW_VERSION = '" + CRW_VERSION + "'"
      util.installSkopeo(CRW_VERSION)
      withCredentials([string(credentialsId:'devstudio-release.token', variable: 'GITHUB_TOKEN'), 
          file(credentialsId: 'crw-build.keytab', variable: 'CRW_KEYTAB')]) {
        util.bootstrap(CRW_KEYTAB)

        println "########################################################################################################"
        println "##  Clone and update github.com/${MIDSTM_REPO}.git"
        println "########################################################################################################"
        util.cloneRepo("https://github.com/${MIDSTM_REPO}.git", "${WORKSPACE}/targetmid", MIDSTM_BRANCH)
        OLD_SHA = util.getLastCommitSHA("${WORKSPACE}/targetmid")
        SOURCE_DIR="${WORKSPACE}/targetmid/dependencies/che-plugin-registry/"

        // Check if che-machine-exec and che-theia plugins are current in upstream repo and if not, add them
        sh('''#!/bin/bash -xe
          cd ''' + SOURCE_DIR + '''
          ./build/scripts/add_che_plugins.sh -b ''' + MIDSTM_BRANCH + ''' $(cat ${WORKSPACE}/targetmid/pom.xml | grep -E "<che.version>" | sed -r -e "s#.+<che.version>(.+)</che.version>#\\1#")
        ''')

        util.updateBaseImages(SOURCE_DIR + "build/dockerfiles", DWNSTM_BRANCH, "-f rhel.Dockerfile")
        SOURCE_SHA = util.getLastCommitSHA("${WORKSPACE}/targetmid")
        println "Got SOURCE_SHA in sources folder: " + SOURCE_SHA
        if (OLD_SHA != SOURCE_SHA) { HAS_CHANGED="true" }

        println "########################################################################################################"
        println "##  Sync ${QUAY_PROJECT} to pkgs.devel"
        println "########################################################################################################"
        util.cloneRepo("ssh://crw-build@pkgs.devel.redhat.com/${DWNSTM_REPO}", "${WORKSPACE}/targetdwn", DWNSTM_BRANCH)
        OLD_SHA = util.getLastCommitSHA("${WORKSPACE}/targetdwn")

        // rsync files in github to dist-git
        sh('''#!/bin/bash -xe
          SOURCEDIR="''' + SOURCE_DIR + '''"
          SYNC_FILES="''' + SYNC_FILES + '''"
          for d in ${SYNC_FILES}; do
            if [[ -f ${SOURCEDIR}/${d} ]]; then
              rsync -azrlt ${SOURCEDIR}/${d} ${WORKSPACE}/targetdwn/${d}
            elif [[ -d ${SOURCEDIR}/${d} ]]; then
              # copy over the dir contents
              rsync -azrlt ${SOURCEDIR}/${d}/* ${WORKSPACE}/targetdwn/${d}/
              # sync the directory and delete from targetdwn if deleted from source
              rsync -azrlt --delete ${SOURCEDIR}/${d}/ ${WORKSPACE}/targetdwn/${d}/
            else
              echo "[WARN] Could not find ${SOURCEDIR}/${d} to sync to ${WORKSPACE}/targetdwn/${d}"
            fi
          done
        ''')

        sh('''#!/bin/bash -xe
          cp -f ''' + SOURCE_DIR + '''build/dockerfiles/rhel.Dockerfile  ${WORKSPACE}/targetdwn/Dockerfile

          CRW_VERSION="''' + CRW_VERSION_F + '''"
          # apply patches to transform CRW upstream to pkgs.devel version
          sed -i ${WORKSPACE}/targetdwn/Dockerfile --regexp-extended \
            `# Replace image used for registry with rhel8/httpd-24` \
            -e 's|^ *FROM registry.access.redhat.com/.* AS registry|# &|' \
            -e 's|# *(FROM.*rhel8/httpd.*)|\\1|' \
            `# Strip registry from image references` \
            -e 's|FROM registry.access.redhat.com/|FROM |' \
            -e 's|FROM registry.redhat.io/|FROM |' \
            `# Set arg options: enable USE_DIGESTS and disable BOOTSTRAP` \
            -e 's|ARG USE_DIGESTS=.*|ARG USE_DIGESTS=''' + USE_DIGESTS + '''|' \
            -e 's|ARG BOOTSTRAP=.*|ARG BOOTSTRAP=false|' \
            `# Enable offline build - copy in built binaries` \
            -e 's|# (COPY root-local.tgz)|\\1|' \
            `# only enable rhel8 here -- don't want centos or epel ` \
            -e 's|^ *(COPY .*)/content_set.*repo (.+)|\\1/content_sets_rhel8.repo \\2|' \
            `# Comment out PATCHED_* args from build and disable update_devfile_patched_image_tags.sh` \
            -e 's|^ *ARG PATCHED.*|# &|' \
            -e '/^ *RUN TAG/,+3 s|.*|# &| ' \
            `# Disable intermediate build targets` \
            -e 's|^ *FROM registry AS offline-registry|# &|' \
            -e '/^ *FROM builder AS offline-builder/,+3 s|.*|# &|' \
            -e 's|^[^#]*--from=offline-builder.*|# &|' \
            `# Enable cache_artifacts.sh` \
            -e '\\|swap_images.sh|i # Cache projects in CRW \\
COPY ./build/dockerfiles/rhel.cache_artifacts.sh resources.tgz /tmp/ \\
RUN /tmp/rhel.cache_artifacts.sh /build/v3/ && rm -rf /tmp/rhel.cache_artifacts.sh /tmp/resources.tgz \\
'

          METADATA='ENV SUMMARY="Red Hat CodeReady Workspaces ''' + QUAY_PROJECT + ''' container" \\\r
    DESCRIPTION="Red Hat CodeReady Workspaces ''' + QUAY_PROJECT + ''' container" \\\r
    PRODNAME="codeready-workspaces" \\\r
    COMPNAME="''' + QUAY_PROJECT + '''-rhel8" \r
LABEL summary="$SUMMARY" \\\r
      description="$DESCRIPTION" \\\r
      io.k8s.description="$DESCRIPTION" \\\r
      io.k8s.display-name=\"$DESCRIPTION" \\\r
      io.openshift.tags="$PRODNAME,$COMPNAME" \\\r
      com.redhat.component="$PRODNAME-$COMPNAME-container" \\\r
      name="$PRODNAME/$COMPNAME" \\\r
      version="'${CRW_VERSION}'" \\\r
      license="EPLv2" \\\r
      maintainer="Nick Boldt <nboldt@redhat.com>" \\\r
      io.openshift.expose-services="" \\\r
      usage="" \r'

          echo -e "$METADATA" >> ${WORKSPACE}/targetdwn/Dockerfile

          echo "======= DOWNSTREAM DOCKERFILE =======>"
          cat ${WORKSPACE}/targetdwn/Dockerfile
          echo "<======= DOWNSTREAM DOCKERFILE ======="
        ''')

        // push changes in github to dist-git
        util.updateBaseImages("${WORKSPACE}/targetdwn", DWNSTM_BRANCH, "--nocommit")
        sh('''#!/bin/bash -xe
          export KRB5CCNAME=/var/tmp/crw-build_ccache
          SYNC_FILES="''' + SYNC_FILES + '''"
          cd ${WORKSPACE}/targetdwn
          if [[ \$(git diff --name-only) ]]; then # file changed
            git add Dockerfile ${SYNC_FILES}
            # note this might fail if we're syncing from a tag vs. a branch
            git commit -s -m "[sync] Update from ''' + MIDSTM_REPO + ''' @ ''' + SOURCE_SHA[0..7] + '''" Dockerfile ${SYNC_FILES}
            git push origin ''' + DWNSTM_BRANCH + ''' || true
            NEW_SHA=\$(git rev-parse HEAD) # echo ${NEW_SHA:0:8}
            echo "[sync] Updated pkgs.devel @ ${NEW_SHA:0:8} from ''' + MIDSTM_REPO + ''' @ ''' + SOURCE_SHA[0..7] + '''"
          fi
        ''')
        NEW_SHA = util.getLastCommitSHA("${WORKSPACE}/targetdwn")
        if (OLD_SHA != NEW_SHA) { HAS_CHANGED="true" }

        println "########################################################################################################"
        println "##  Update the tarballs"
        println "########################################################################################################"
        sh('''#!/bin/bash -xe
          export KRB5CCNAME=/var/tmp/crw-build_ccache
          # step 1 - build the container
          cd ${WORKSPACE}/targetdwn

          # transform Brew friendly Dockerfile so we can use it in Jenkins where base images need full registry path
          sed ${WORKSPACE}/targetdwn/Dockerfile --regexp-extended \
            -e 's|COPY (.*) resources.tgz (.*)|COPY \\1 \\2|' \
            -e 's|ARG BOOTSTRAP=.*|ARG BOOTSTRAP=true|' \
            `# enable LATEST_ONLY for bootstrap build only` \
            -e 's|ARG LATEST_ONLY=.*|ARG LATEST_ONLY=true|' \
            -e 's|ARG USE_DIGESTS=.*|ARG USE_DIGESTS=''' + USE_DIGESTS + '''|' \
            -e 's|^ *COPY root-local.tgz|# &|' \
            `# replace org/container:tag with reg-proxy/rh-osbs/org-container:tag` \
            -e "s#^FROM ([^/:]+)/([^/:]+):([^/:]+)#FROM registry-proxy.engineering.redhat.com/rh-osbs/\\1-\\2:\\3#" \
            `# replace ubi8-minimal:tag with reg-proxy/rh-osbs/ubi-minimal:tag` \
            -e "s#^FROM ([^/:]+):([^/:]+)#FROM registry-proxy.engineering.redhat.com/rh-osbs/\\1:\\2#" \
            -e 's|# (COPY .*content_sets.*)|\\1|' \
            > ${WORKSPACE}/bootstrap.Dockerfile

          echo "======= BOOTSTRAP DOCKERFILE =======>"
          cat ${WORKSPACE}/bootstrap.Dockerfile
          echo "<======= BOOTSTRAP DOCKERFILE ======="

          echo "======= START BOOTSTRAP BUILD =======>"
          # do not need digests in the BOOTSTRAP build so override default with false
          CONTAINERNAME="''' + QUAY_PROJECT + '''offline"
          docker build -t ${CONTAINERNAME} . --no-cache -f ${WORKSPACE}/bootstrap.Dockerfile \
            --target builder --build-arg BOOTSTRAP=true --build-arg USE_DIGESTS=false
          echo "<======= END BOOTSTRAP BUILD ======="

          # update tarballs - step 2 - check old sources' tarballs
          cd ${WORKSPACE}/targetdwn
          # TODO is there a better way to determine if we need to push sources?
          rhpkg sources

          # update tarballs - step 3 - create tarballs in targetdwn folder
          mkdir -p /tmp/root-local/ && docker run --rm -v \
            /tmp/root-local/:/tmp/root-local/ ${CONTAINERNAME} /bin/bash \
            -c "cd /root/.local/ && cp -r bin/ lib/ /tmp/root-local/"

          # check diff
          BEFORE_DIR=/tmp/root-local-before
          rm -fr ${BEFORE_DIR}; mkdir ${BEFORE_DIR} && tar xzf ${WORKSPACE}/targetdwn/root-local.tgz -C ${BEFORE_DIR}
          TAR_DIFF=$(sudo diff --suppress-common-lines -u -r ${BEFORE_DIR} /tmp/root-local -x "*.pyc" -x "installed-files.txt") || true
          if [[ ${TAR_DIFF} ]]; then
            echo "DIFF START *****"
            echo "${TAR_DIFF}"
            echo "***** END DIFF"
            pushd /tmp/root-local >/dev/null && sudo tar czf root-local.tgz lib/ bin/ && popd >/dev/null && mv -f /tmp/root-local/root-local.tgz . && sudo rm -fr /tmp/root-local/
          fi

          mkdir -p /tmp/''' + QUAY_PROJECT + '''-resources/
          docker run --rm -v /tmp/''' + QUAY_PROJECT + '''-resources/:/tmp/''' + QUAY_PROJECT + '''-resources/ \
            --entrypoint /bin/bash ${CONTAINERNAME} -c \
            "cd /build && cp -r v3/* /tmp/''' + QUAY_PROJECT + '''-resources/"

          # check diff
          if [[ -f ${WORKSPACE}/targetdwn/resources.tgz ]]; then
            BEFORE_DIR=/tmp/''' + QUAY_PROJECT + '''-resources-before
            rm -fr ${BEFORE_DIR}; mkdir ${BEFORE_DIR} && tar xzf ${WORKSPACE}/targetdwn/resources.tgz -C ${BEFORE_DIR}
            TAR_DIFF2=$(sudo diff --suppress-common-lines -u -r ${BEFORE_DIR} /tmp/''' + QUAY_PROJECT + '''-resources -x "resources/*" -x "*.vsix" -x "*.theia") || true
          else
            TAR_DIFF2="No such file ${WORKSPACE}/targetdwn/resources.tgz -- creating a new one for the first time"
          fi
          if [[ ${TAR_DIFF2} ]]; then
            echo "DIFF START *****"
            echo "${TAR_DIFF2}"
            echo "***** END DIFF"
            pushd /tmp/''' + QUAY_PROJECT + '''-resources/ >/dev/null && \
              sudo tar czf resources.tgz ./* && \
              popd >/dev/null && \
              mv -f /tmp/''' + QUAY_PROJECT + '''-resources/resources.tgz . && \
              sudo rm -fr /tmp/''' + QUAY_PROJECT + '''-resources/
          fi

          # update tarballs - step 4 - commit changes if diff different
          if [[ ${TAR_DIFF} ]] || [[ ${TAR_DIFF2} ]]; then
            hasChanged=1
            git pull origin ''' + DWNSTM_BRANCH + ''' || true
            rhpkg new-sources root-local.tgz resources.tgz
            git commit -s -m "[tgz] Update root-local.tgz and resources.tgz" sources
            git push origin ''' + DWNSTM_BRANCH + '''
          else
            echo "No changes since previous tarball was created."
          fi

          # clean up diff dirs
          sudo rm -fr /tmp/root-local /tmp/root-local-before /tmp/''' + QUAY_PROJECT + '''-resources /tmp/''' + QUAY_PROJECT + '''-resources-before
        ''')
        NEW_SHA = util.getLastCommitSHA("${WORKSPACE}/targetdwn")
        if (OLD_SHA != SOURCE_SHA) { HAS_CHANGED="true" }

        println "########################################################################################################"
        println "##  Container Build"
        println "########################################################################################################"
        if (HAS_CHANGED == "true" || FORCE_BUILD == "true") {
          sh('''#!/bin/bash -xe
            # NOTE: this image needs to build in Brew (CRW <=2.3), then rebuild for Quay, so use QUAY_REBUILD_PATH instead of QUAY_REPO_PATHs variable
            # For CRW 2.4, do not rebuild (just copy to Quay) and use an ImageContentSourcePolicy file to resolve images
            # https://gitlab.cee.redhat.com/codeready-workspaces/knowledge-base/-/blob/master/installStagingCRW.md#create-imagecontentsourcepolicy
            for QRP in ''' + QUAY_PROJECT + '''; do
              QUAY_REPO_PATH=""; if [[ ''' + PUSH_TO_QUAY + ''' == "true" ]]; then QUAY_REPO_PATH="${QRP}-rhel8"; fi
              curl \
"https://codeready-workspaces-jenkins.rhev-ci-vms.eng.rdu2.redhat.com/job/get-sources-rhpkg-container-build/buildWithParameters?\
token=CI_BUILD&\
cause=${QUAY_REPO_PATH}+respin+by+${BUILD_TAG}&\
GIT_BRANCH=''' + DWNSTM_BRANCH + '''&\
GIT_PATHs=containers/codeready-workspaces-${QRP}&\
QUAY_REPO_PATHs=${QUAY_REPO_PATH}&\
JOB_BRANCH=''' + CRW_VERSION + '''&\
FORCE_BUILD=true&\
SCRATCH=''' + SCRATCH + '''"
            done
          ''')
        } else {
          println "No changes upstream, nothing to commit"
        }

        NEW_SHA = util.getLastCommitSHA("${WORKSPACE}/targetdwn")
        println "Got NEW_SHA in targetdwn folder: " + NEW_SHA

        if (NEW_SHA.equals(OLD_SHA) && !FORCE_BUILD.equals("true")) {
          currentBuild.result='UNSTABLE'
        }
      } // withCredentials
    } // wrap
  } // node
} // timeout